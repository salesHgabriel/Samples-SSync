@page "/note"
@inject HttpClient Http
@inject ISnackbar Snackbar


<PageTitle>Notes</PageTitle>

<h1>Notes</h1>

@if (notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (users != null)
    {
        <MudSelect
        @bind-Value="userIdSelected"
        Variant="Variant.Filled"
        Label="Users"
        Dense
        Placeholder="Select user"
        HelperTextOnFocus
        Clearable>
            @foreach (var u in users)
            {
                <MudSelectItem T="Guid ?" Value="u.Id">@u.Name</MudSelectItem>
            }
        </MudSelect>

        if (userIdSelected.HasValue)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="((args) => CreateRandomNote(userIdSelected!.Value))">Create random Note</MudButton>
        }

        <MudTable Items="@notes" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Message</MudTh>
                <MudTh>User</MudTh>
                <MudTh>Completed</MudTh>
                <MudTh>CreatedAt</MudTh>
                <MudTh>UpdatedAt</MudTh>
                <MudTh>DeletedAt</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Message">@context.Message</MudTd>
                <MudTd DataLabel="UserId">@(users.FirstOrDefault(s => s.Id == context.UserId)?.Name)</MudTd>
                <MudTd DataLabel="Completed">
                    @if (context.Completed)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.MarkChatRead" Color="Color.Primary" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Undo" Color="Color.Primary" />
                    }
                </MudTd>
                <MudTd DataLabel="CreatedAt">@context.CreatedAt.ToString()</MudTd>
                <MudTd DataLabel="UpdatedAt">@context.UpdatedAt.ToString()</MudTd>
                <MudTd DataLabel="DeletedAt">
                    @if (context.DeletedAt != null)
                    {
                        <MudBadge Icon="@Icons.Material.Filled.RestoreFromTrash" Color="Color.Error">
                            <MudText>@context.DeletedAt.ToString()</MudText>
                        </MudBadge>
                    }
                    else
                    {
                        <b>&nbsp;</b>
                    }
                </MudTd>

                <MudTd DataLabel="Actions">
                    <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" @onclick="(async (args) => await UpdateNote(context))" />
                    <MudFab Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Filled.Remove" @onclick="(async (args) => await DeleteNote(context))" />
                    <MudFab Color="Color.Secondary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Done" @onclick="(async (args) => await MarkCompleted(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>

    }
}


@code {


    private NoteResp[]? notes;
    private UserResp[]? users;
    private Guid? userIdSelected;
    private bool _loading;


    protected override async Task OnInitializedAsync()
    {
        await ListNotes();
        await ListUsers();
    }

    private async Task ListNotes()
    {
        _loading = true;
        notes = await Http.GetFromJsonAsync<NoteResp[]>("api/crud/notes/list");
        _loading = false;

    }

    private async Task ListUsers()
    {
        users = await Http.GetFromJsonAsync<UserResp[]>("api/crud/notes/users/list");
    }

    private async Task CreateRandomNote(Guid userIdSelected)
    {
        await Http.PostAsync($"api/crud/notes/user/{userIdSelected}/create", new StringContent(""));
        Snackbar.Add("Created random note");

        await ListNotes();
    }

    private async Task UpdateNote(NoteResp noteResp)
    {
        await Http.PutAsync($"api/crud/notes/update/{noteResp.Id}", new StringContent(""));
        Snackbar.Add("Updated random note");

        await ListNotes();
    }

    private async Task MarkCompleted(NoteResp noteResp)
    {
        await Http.PutAsync($"api/crud/notes/completed/{noteResp.Id}", new StringContent(""));
        Snackbar.Add("Done random note");

        await ListNotes();
    }


    private async Task DeleteNote(NoteResp noteResp)
    {
        await Http.DeleteAsync($"api/crud/notes/delete/{noteResp.Id}");
        Snackbar.Add("Delete random note");
        await ListNotes();
    }






    public class NoteResp
    {
        public bool Completed { get; set; }
        public string? Message { get; set; }
        public Guid? UserId { get; set; }
        public Guid Id { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public DateTime? DeletedAt { get; set; }
    }

    public class UserResp
    {
        public string? Name { get; set; }
        public Guid Id { get; set; }
    }
}
