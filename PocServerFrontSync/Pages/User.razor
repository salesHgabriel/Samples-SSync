@page "/user"
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Users</PageTitle>


<MudText Typo="Typo.h3">Users</MudText>


@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CreateRandomUser">Create random user</MudButton>


    <MudTable Items="@users" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Age</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Created</MudTh>
            <MudTh>Updated</MudTh>
            <MudTh>Deleted</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Age">@context.Age</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="CreatedAt">@context.CreatedAt.ToString()</MudTd>
            <MudTd DataLabel="UpdatedAt">@context.UpdatedAt.ToString()</MudTd>
            <MudTd DataLabel="DeletedAt">
                @if (context.DeletedAt != null)
                {
                    <MudBadge Icon="@Icons.Material.Filled.RestoreFromTrash" Color="Color.Error">
                        <MudText>@context.DeletedAt.ToString()</MudText>
                    </MudBadge>
                }
                else
                {
                    <b>&nbsp;</b>
                }
            </MudTd>

            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="(async (args) => await UpdateUser(context))">Up</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="(async (args) => await DeleteUser(context))">Del</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    @if (docs != null)
    {
        <MudText Typo="Typo.h3">Docs uploaded</MudText>

        <MudDivider DividerType="DividerType.Middle" Class="my-6" />

        <MudCarousel ShowArrows="ExistMoreOneItem()"
        Style="width:100%;height:500px"
        ShowBullets="true"
        EnableSwipeGesture="true"
        AutoCycle="true"
        ItemsSource="@docs">
            <ItemTemplate>
                <MudImage Style="width:100%;height:500px"
                Elevation="25"
                ObjectFit="ObjectFit.Contain"
                Fluid="true"
                Src="@context.Link"
                Alt="@context.Name"
                Class="rounded-lg" />
            </ItemTemplate>
        </MudCarousel>

    }
}

@code {
    private UserResp[]? users;
    private DocResp[]? docs;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        await ListUsers();
        await ListDocs();
    }

    private async Task ListUsers()
    {
        _loading = true;
        users = await Http.GetFromJsonAsync<UserResp[]>("api/crud/users/list");
        _loading = false;

    }

    private async Task ListDocs()
    {
        docs = await Http.GetFromJsonAsync<DocResp[]>("api/crud/docs/list");
    }


    private async Task CreateRandomUser()
    {
        await Http.PostAsync("api/crud/users/create", new StringContent(""));
        Snackbar.Add("Created random user");
        await ListUsers();
    }

    private async Task UpdateUser(UserResp userResp)
    {
        await Http.PutAsync($"api/crud/users/update/{userResp.Id}", new StringContent(""));
        Snackbar.Add("Updated random user");
        await ListUsers();
    }

    private async Task DeleteUser(UserResp userResp)
    {
        await Http.DeleteAsync($"api/crud/users/delete/{userResp.Id}");
        Snackbar.Add("Deleted random user");
        await ListUsers();
    }

    private bool ExistMoreOneItem() => docs != null && docs.Count() > 1;


    public class DocResp
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string Link { get; set; }
    }

    public class UserResp
    {
        public string? Name { get; set; }
        public int Age { get; set; }
        public Guid Id { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public DateTime? DeletedAt { get; set; }
    }
}
