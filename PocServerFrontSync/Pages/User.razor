@page "/user"
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>Users</h1>





@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateRandomUser">Create random user</button>
    
    <table class="table">
        <thead>
        <tr>
            <th>Idade</th>
            <th>Nome</th>
            <th>Criado em</th>
            <th>Atualizado em</th>
            <th>Deletado em</th>
            <th>Ações</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Age</td>
                <td>@forecast.Name</td>
                <td>@forecast.CreatedAt.ToString()</td>
                <td>@forecast.UpdatedAt.ToString()</td>
                @if (forecast.DeletedAt != null)
                {
                    <td>
                        <div class="badge bg-danger">Deletado</div>
                        @forecast.DeletedAt.ToString()
                    </td>
                }
                else
                {
                    <td>
                        &nbsp;
                    </td>
                }
                <td>
                    <button @onclick="(async (args) => await UpdateUser(forecast))" class="btn btn-primary">Up</button>
                    <button @onclick="(async (args) => await DeleteUser(forecast))" class="btn btn-danger">Del</button>
                </td>

            </tr>
        }
        </tbody>
    </table>
    
    @if (docs == null)
    {
        <p><em>Carregando imagens...</em></p>
    }
    else
    {
        <div class="image-grid">
            @if (docs != null && docs.Any())
            {
                @foreach (var image in docs)
                {
                    <div class="image-item">
                        <img src="@image.Link" alt="@image.Name" />
                        <p>@image.Name</p>
                    </div>
                }
            }
            else
            {
                <p>Não há imagens para exibir.</p>
            }
        </div>      
    }
    

    
    
}

@code {
    private UserResp[]? forecasts;
    private DocResp[]? docs;

    protected override async Task OnInitializedAsync()
    {
        await ListUsers();
        await ListDocs();
    }

    private async Task ListUsers()
    {
        forecasts = await Http.GetFromJsonAsync<UserResp[]>("api/crud/users/list");
    }

    private async Task ListDocs()
    {
        docs = await Http.GetFromJsonAsync<DocResp[]>("api/crud/docs/list");
    }

    
    private async Task CreateRandomUser()
    {
        await Http.PostAsync("api/crud/users/create", new StringContent(""));
        await ListUsers();
    }

    private async Task UpdateUser(UserResp userResp)
    {
        await Http.PutAsync($"api/crud/users/update/{userResp.Id}", new StringContent(""));
        await ListUsers();
    }

    private async Task DeleteUser(UserResp userResp)
    {
        await Http.DeleteAsync($"api/crud/users/delete/{userResp.Id}");
        await ListUsers();
    }




    public class DocResp
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string Link { get; set; }
    }
    
    public class UserResp
    {
        public string? Name { get; set; }
        public int Age { get; set; }
        public Guid Id { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public DateTime? DeletedAt { get; set; }
    }
}
